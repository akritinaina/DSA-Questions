class Solution {
    public int numIslands(char[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        boolean visited[][] = new boolean[m][n];
        int count=0;
        for(int i=0;i<m;i++){
            
            for(int j=0;j<n;j++){
                
                if(grid[i][j]=='1' && !visited[i][j]){
                    dfs(grid,i,j,visited);
                    count++;
                }
            }
        }
        return count;
    }
    public static void dfs(char[][] grid,int row,int col,boolean visited[][]){
        
        int rows[] = {-1,1,0,0};
        int cols[] = {0,0,-1,1};
        visited[row][col]=true;
        for(int i=0;i<4;i++){
            if(isSafe(grid,row+rows[i],col+cols[i],visited)){
                dfs(grid,rows[i]+row,cols[i]+col,visited); 
            }
                  
        }
        
    }
    public static boolean isSafe(char[][] grid,int row,int col,boolean visited[][]){
        
        if(row>=0 && row<grid.length && col>=0 && col<grid[0].length && grid[row][col]=='1' && !visited[row][col])
            return true;
        return false;
    } 
    
}
